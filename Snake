using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class Snake : MonoBehaviour
{
    public float moveSpeed = 5f;            // Snake speed: number of steps per second
    public GameObject bodyPrefab;           // Prefab for snake body segments
    private Vector2 direction = Vector2.right; // Initial movement direction
    private List<Transform> bodyParts = new List<Transform>(); // Tracks all body segments

    void Start()
    {
        // Add the head (this object) as the first segment
        bodyParts.Add(transform);
        // Start the coroutine that moves the snake in discrete steps
        StartCoroutine(MoveRoutine());
    }

    void Update()
    {
        // Read user input once per frame and update direction accordingly
        if (Input.GetKeyDown(KeyCode.W) && direction != Vector2.down)
            direction = Vector2.up;
        if (Input.GetKeyDown(KeyCode.S) && direction != Vector2.up)
            direction = Vector2.down;
        if (Input.GetKeyDown(KeyCode.A) && direction != Vector2.right)
            direction = Vector2.left;
        if (Input.GetKeyDown(KeyCode.D) && direction != Vector2.left)
            direction = Vector2.right;
    }


    public List<Vector2> GetSnakePositions()
    {
        List<Vector2> positions = new List<Vector2>();
        foreach (Transform part in bodyParts)
        {
            positions.Add(new Vector2(
                Mathf.Round(part.position.x),
                Mathf.Round(part.position.y)
            ));
        }
        return positions;
    }


    IEnumerator MoveRoutine()
    {
        // Infinite loop to keep the snake moving
        while (true)
        {
            // Store headâ€™s current position
            Vector3 prevPos = transform.position;

            // Move head one grid unit in the current direction
            transform.position = new Vector3(
                Mathf.Round(prevPos.x) + direction.x,
                Mathf.Round(prevPos.y) + direction.y,
                0f
            );

            // Update each body part to follow the previous part
            for (int i = 1; i < bodyParts.Count; i++)
            {
                Vector3 temp = bodyParts[i].position;
                bodyParts[i].position = prevPos;
                prevPos = temp;
            }

            // Pause before the next move. 1f / moveSpeed means 'steps per second' :contentReference[oaicite:1]{index=1}
            yield return new WaitForSeconds(1f / moveSpeed);
        }
    }

    //COLLISONS
    void OnTriggerEnter2D(Collider2D other)
    {
        if (other.tag == "Food")
        {
            Grow();
            Destroy(other.gameObject);
            FindAnyObjectByType<FoodSpawner>().SpawnFood();
        }
    }

    public void Grow()
    {
        // Instantiate a new body segment at the tail's position
        GameObject newPart = Instantiate(bodyPrefab);
        newPart.transform.position = bodyParts[bodyParts.Count - 1].position;
        // Add the new segment to the list so it follows correctly
        bodyParts.Add(newPart.transform);
    }
}
